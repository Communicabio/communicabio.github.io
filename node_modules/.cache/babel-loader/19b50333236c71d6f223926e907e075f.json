{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React from 'react';\nimport classNames from '../../lib/classNames';\nimport getClassName from '../../helpers/getClassName';\nimport Tappable from '../Tappable/Tappable';\nimport Icon24Chevron from '@vkontakte/icons/dist/24/chevron';\nimport { IOS } from '../../lib/platform';\nimport usePlatform from '../../hooks/usePlatform';\n\nvar SimpleCell = function SimpleCell(_ref) {\n  var before = _ref.before,\n      indicator = _ref.indicator,\n      children = _ref.children,\n      after = _ref.after,\n      description = _ref.description,\n      className = _ref.className,\n      expandable = _ref.expandable,\n      multiline = _ref.multiline,\n      restProps = _objectWithoutProperties(_ref, [\"before\", \"indicator\", \"children\", \"after\", \"description\", \"className\", \"expandable\", \"multiline\"]);\n\n  var platform = usePlatform();\n  var hasAfter = after || expandable && platform === IOS;\n  return /*#__PURE__*/React.createElement(Tappable, _extends({}, restProps, {\n    Component: restProps.href ? 'a' : 'div',\n    className: classNames(className, getClassName('SimpleCell', platform), {\n      'SimpleCell--exp': expandable,\n      'SimpleCell--mult': multiline\n    })\n  }), before, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"SimpleCell__main\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"SimpleCell__children\"\n  }, children), description && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"SimpleCell__description\"\n  }, description)), indicator && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"SimpleCell__indicator\"\n  }, indicator), hasAfter && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"SimpleCell__after\"\n  }, after, expandable && platform === IOS && /*#__PURE__*/React.createElement(Icon24Chevron, null)));\n};\n\nexport default SimpleCell;","map":{"version":3,"sources":["../../../../src/components/SimpleCell/SimpleCell.tsx"],"names":["SimpleCell","before","indicator","children","after","description","className","expandable","multiline","restProps","platform","usePlatform","hasAfter","classNames","getClassName"],"mappings":";;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,UAAA,MAAA,sBAAA;AACA,OAAA,YAAA,MAAA,4BAAA;AACA,OAAA,QAAA,MAAA,sBAAA;AACA,OAAA,aAAA,MAAA,kCAAA;AAEA,SAAA,GAAA,QAAA,oBAAA;AACA,OAAA,WAAA,MAAA,yBAAA;;AAkBA,IAAMA,UAA+B,GAAG,SAAlCA,UAAkC,CAAA,IAAA,EAUlC;AAAA,MATJC,MASI,GAAA,IAAA,CATJA,MASI;AAAA,MARJC,SAQI,GAAA,IAAA,CARJA,SAQI;AAAA,MAPJC,QAOI,GAAA,IAAA,CAPJA,QAOI;AAAA,MANJC,KAMI,GAAA,IAAA,CANJA,KAMI;AAAA,MALJC,WAKI,GAAA,IAAA,CALJA,WAKI;AAAA,MAJJC,SAII,GAAA,IAAA,CAJJA,SAII;AAAA,MAHJC,UAGI,GAAA,IAAA,CAHJA,UAGI;AAAA,MAFJC,SAEI,GAAA,IAAA,CAFJA,SAEI;AAAA,MADDC,SACC,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,QAAA,EAAA,WAAA,EAAA,UAAA,EAAA,OAAA,EAAA,aAAA,EAAA,WAAA,EAAA,YAAA,EAAA,WAAA,CAAA,CAAA;;AACJ,MAAMC,QAAQ,GAAGC,WAAjB,EAAA;AACA,MAAMC,QAAQ,GAAGR,KAAK,IAAIG,UAAU,IAAIG,QAAQ,KAAhD,GAAA;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,QAAA,CAAA,EAAA,EAAA,SAAA,EAAA;AAEE,IAAA,SAAS,EAAED,SAAS,CAATA,IAAAA,GAAAA,GAAAA,GAFb,KAAA;AAGE,IAAA,SAAS,EACPI,UAAU,CAAA,SAAA,EAERC,YAAY,CAAA,YAAA,EAFJ,QAEI,CAFJ,EAGR;AACE,yBADF,UAAA;AAEE,0BAAoBN;AAFtB,KAHQ;AAJd,GAAA,CAAA,EAAA,MAAA,EAAA,aAeE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC;AAAf,GAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC;AAAf,GAAA,EADF,QACE,CADF,EAEGH,WAAW,IAAA,aAAI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC;AAAf,GAAA,EAjBpB,WAiBoB,CAFlB,CAfF,EAmBGH,SAAS,IAAA,aACR,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC;AAAf,GAAA,EApBJ,SAoBI,CApBJ,EAwBGU,QAAQ,IAAA,aACP,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC;AAAf,GAAA,EAAA,KAAA,EAEGL,UAAU,IAAIG,QAAQ,KAAtBH,GAAAA,IAAAA,aAAkC,KAAA,CAAA,aAAA,CAAA,aAAA,EA5B3C,IA4B2C,CAFrC,CAzBJ,CADF;AAdF,CAAA;;AAiDA,eAAA,UAAA","sourcesContent":["import React, { HTMLAttributes, ReactNode, FC } from 'react';\nimport classNames from '../../lib/classNames';\nimport getClassName from '../../helpers/getClassName';\nimport Tappable from '../Tappable/Tappable';\nimport Icon24Chevron from '@vkontakte/icons/dist/24/chevron';\nimport { HasLinkProps, HasRootRef } from '../../types';\nimport { IOS } from '../../lib/platform';\nimport usePlatform from '../../hooks/usePlatform';\n\nexport interface SimpleCellProps extends HTMLAttributes<HTMLElement>, HasRootRef<HTMLElement>, HasLinkProps {\n  /**\n   * Иконка 28 или `<Avatar size={28|32|40|48|72} />`\n   */\n  before?: ReactNode;\n  indicator?: ReactNode;\n  /**\n   * Иконка 24|28 или `<Switch />`\n   */\n  after?: ReactNode;\n  description?: ReactNode;\n  disabled?: boolean;\n  expandable?: boolean;\n  multiline?: boolean;\n}\n\nconst SimpleCell: FC<SimpleCellProps> = ({\n  before,\n  indicator,\n  children,\n  after,\n  description,\n  className,\n  expandable,\n  multiline,\n  ...restProps\n}) => {\n  const platform = usePlatform();\n  const hasAfter = after || expandable && platform === IOS;\n\n  return (\n    <Tappable\n      {...restProps}\n      Component={restProps.href ? 'a' : 'div'}\n      className={\n        classNames(\n          className,\n          getClassName('SimpleCell', platform),\n          {\n            'SimpleCell--exp': expandable,\n            'SimpleCell--mult': multiline,\n          },\n        )\n      }\n    >\n      {before}\n      <div className=\"SimpleCell__main\">\n        <div className=\"SimpleCell__children\">{children}</div>\n        {description && <div className=\"SimpleCell__description\">{description}</div>}\n      </div>\n      {indicator &&\n        <div className=\"SimpleCell__indicator\">\n          {indicator}\n        </div>\n      }\n      {hasAfter &&\n        <div className=\"SimpleCell__after\">\n          {after}\n          {expandable && platform === IOS && <Icon24Chevron />}\n        </div>\n      }\n    </Tappable>\n  );\n};\n\nexport default SimpleCell;\n"]},"metadata":{},"sourceType":"module"}