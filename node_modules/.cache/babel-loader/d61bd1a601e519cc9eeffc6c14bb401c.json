{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport React from 'react';\nimport { canUseDOM } from '../../lib/dom';\nimport PropTypes from 'prop-types';\nimport { Appearance, ConfigProviderContext, Scheme, WebviewType } from './ConfigProviderContext';\nimport vkBridge from '@vkontakte/vk-bridge';\n\nvar ConfigProvider = /*#__PURE__*/function (_React$Component) {\n  _inherits(ConfigProvider, _React$Component);\n\n  var _super = _createSuper(ConfigProvider);\n\n  function ConfigProvider(props) {\n    var _this;\n\n    _classCallCheck(this, ConfigProvider);\n\n    _this = _super.call(this, props);\n\n    if (canUseDOM) {\n      _this.setScheme(props.scheme);\n    }\n\n    return _this;\n  }\n\n  _createClass(ConfigProvider, [{\n    key: \"mapOldScheme\",\n    value: function mapOldScheme(scheme) {\n      switch (scheme) {\n        case Scheme.DEPRECATED_CLIENT_LIGHT:\n          return Scheme.BRIGHT_LIGHT;\n\n        case Scheme.DEPRECATED_CLIENT_DARK:\n          return Scheme.SPACE_GRAY;\n\n        default:\n          return scheme;\n      }\n    }\n  }, {\n    key: \"setScheme\",\n    value: function setScheme(scheme) {\n      document.body.setAttribute('scheme', scheme);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.scheme !== this.props.scheme) {\n        this.setScheme(this.mapOldScheme(this.props.scheme));\n      }\n    }\n  }, {\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        isWebView: this.props.isWebView,\n        webviewType: this.props.webviewType,\n        scheme: this.mapOldScheme(this.props.scheme),\n        appearance: this.props.appearance,\n        app: this.props.app,\n        transitionMotionEnabled: this.props.transitionMotionEnabled\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(ConfigProviderContext.Provider, {\n        value: this.getChildContext()\n      }, this.props.children);\n    }\n  }]);\n\n  return ConfigProvider;\n}(React.Component);\n\n_defineProperty(ConfigProvider, \"defaultProps\", {\n  webviewType: WebviewType.VKAPPS,\n  isWebView: vkBridge.isWebView(),\n  scheme: Scheme.BRIGHT_LIGHT,\n  appearance: Appearance.LIGHT,\n  transitionMotionEnabled: true\n});\n\n_defineProperty(ConfigProvider, \"childContextTypes\", {\n  isWebView: PropTypes.bool,\n  scheme: PropTypes.oneOf([Scheme.SPACE_GRAY, Scheme.BRIGHT_LIGHT, Scheme.DEPRECATED_CLIENT_DARK, Scheme.DEPRECATED_CLIENT_LIGHT]),\n  webviewType: PropTypes.oneOf([WebviewType.VKAPPS, WebviewType.INTERNAL]),\n  appearance: PropTypes.oneOf([Appearance.DARK, Appearance.LIGHT]),\n  app: PropTypes.string,\n  transitionMotionEnabled: PropTypes.bool\n});\n\nexport { ConfigProvider as default };","map":{"version":3,"sources":["../../../../src/components/ConfigProvider/ConfigProvider.tsx"],"names":["ConfigProvider","React","Component","props","webviewType","WebviewType","isWebView","vkBridge","scheme","Scheme","appearance","Appearance","transitionMotionEnabled","PropTypes","app","bool","document","prevProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { canUseDOM } from '../../lib/dom';\nimport PropTypes, { Validator } from 'prop-types';\nimport {\n  Appearance,\n  ConfigProviderContext,\n  ConfigProviderContextInterface,\n  Scheme,\n  WebviewType,\n} from './ConfigProviderContext';\nimport { HasChildren } from '../../types';\nimport vkBridge, { AppearanceSchemeType } from '@vkontakte/vk-bridge';\n\nexport interface ConfigProviderProps extends ConfigProviderContextInterface, HasChildren {}\n\nexport interface ConfigProviderChildContextType {\n  isWebView: Validator<boolean>;\n  scheme: Validator<Scheme>;\n  webviewType: Validator<WebviewType>;\n  appearance: Validator<Appearance>;\n  app: Validator<string>;\n  transitionMotionEnabled: Validator<boolean>;\n}\n\nexport default class ConfigProvider extends React.Component<ConfigProviderProps> {\n  constructor(props: ConfigProviderProps) {\n    super(props);\n    if (canUseDOM) {\n      this.setScheme(props.scheme);\n    }\n  }\n\n  static defaultProps: ConfigProviderProps = {\n    webviewType: WebviewType.VKAPPS,\n    isWebView: vkBridge.isWebView(),\n    scheme: Scheme.BRIGHT_LIGHT,\n    appearance: Appearance.LIGHT,\n    transitionMotionEnabled: true,\n  };\n\n  static childContextTypes: ConfigProviderChildContextType = {\n    isWebView: PropTypes.bool,\n    scheme: PropTypes.oneOf([\n      Scheme.SPACE_GRAY,\n      Scheme.BRIGHT_LIGHT,\n      Scheme.DEPRECATED_CLIENT_DARK,\n      Scheme.DEPRECATED_CLIENT_LIGHT,\n    ]),\n    webviewType: PropTypes.oneOf([WebviewType.VKAPPS, WebviewType.INTERNAL]),\n    appearance: PropTypes.oneOf([Appearance.DARK, Appearance.LIGHT]),\n    app: PropTypes.string,\n    transitionMotionEnabled: PropTypes.bool,\n  };\n\n  mapOldScheme(scheme: AppearanceSchemeType): AppearanceSchemeType {\n    switch (scheme) {\n      case Scheme.DEPRECATED_CLIENT_LIGHT:\n        return Scheme.BRIGHT_LIGHT;\n      case Scheme.DEPRECATED_CLIENT_DARK:\n        return Scheme.SPACE_GRAY;\n      default:\n        return scheme;\n    }\n  }\n\n  setScheme(scheme: AppearanceSchemeType): void {\n    document.body.setAttribute('scheme', scheme);\n  }\n\n  componentDidUpdate(prevProps: ConfigProviderProps) {\n    if (prevProps.scheme !== this.props.scheme) {\n      this.setScheme(this.mapOldScheme(this.props.scheme));\n    }\n  }\n\n  getChildContext(): ConfigProviderProps {\n    return {\n      isWebView: this.props.isWebView,\n      webviewType: this.props.webviewType,\n      scheme: this.mapOldScheme(this.props.scheme),\n      appearance: this.props.appearance,\n      app: this.props.app,\n      transitionMotionEnabled: this.props.transitionMotionEnabled,\n    };\n  }\n\n  render() {\n    return (\n      <ConfigProviderContext.Provider value={this.getChildContext()}>\n        {this.props.children}\n      </ConfigProviderContext.Provider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}