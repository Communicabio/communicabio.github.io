{"ast":null,"code":"var _jsxFileName = \"/home/aishutin/DL/communicabio.github.io/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport Home from './panels/Home';\nimport Persik from './panels/Persik';\n\nconst App = () => {\n  const [activePanel, setActivePanel] = useState('home');\n  const [fetchedUser, setUser] = useState(null);\n  const [popout, setPopout] = useState( /*#__PURE__*/React.createElement(ScreenSpinner, {\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 39\n    }\n  }));\n  useEffect(() => {\n    bridge.subscribe(({\n      detail: {\n        type,\n        data\n      }\n    }) => {\n      if (type === 'VKWebAppUpdateConfig') {\n        const schemeAttribute = document.createAttribute('scheme');\n        schemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n        document.body.attributes.setNamedItem(schemeAttribute);\n      }\n    });\n\n    async function fetchData() {\n      const user = await bridge.send('VKWebAppGetUserInfo');\n      setUser(user);\n      setPopout(null);\n    }\n\n    fetchData();\n  }, []);\n\n  const go = e => {\n    setActivePanel(e.currentTarget.dataset.to);\n  };\n\n  return /*#__PURE__*/React.createElement(View, {\n    activePanel: activePanel,\n    popout: popout,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Home, {\n    id: \"home\",\n    fetchedUser: fetchedUser,\n    go: go,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/aishutin/DL/communicabio.github.io/src/App.js"],"names":["React","useState","useEffect","bridge","View","ScreenSpinner","Home","Persik","App","activePanel","setActivePanel","fetchedUser","setUser","popout","setPopout","subscribe","detail","type","data","schemeAttribute","document","createAttribute","value","scheme","body","attributes","setNamedItem","fetchData","user","send","go","e","currentTarget","dataset","to"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,2CAAjB;AACA,OAAOC,aAAP,MAA0B,6DAA1B;AACA,OAAO,+BAAP;AAEA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AACjB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,MAAD,CAA9C;AACA,QAAM,CAACU,WAAD,EAAcC,OAAd,IAAyBX,QAAQ,CAAC,IAAD,CAAvC;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,eAAC,oBAAC,aAAD;AAAe,IAAA,IAAI,EAAC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACfC,IAAAA,MAAM,CAACY,SAAP,CAAiB,CAAC;AAAEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR;AAAV,KAAD,KAA+B;AAC/C,UAAID,IAAI,KAAK,sBAAb,EAAqC;AACpC,cAAME,eAAe,GAAGC,QAAQ,CAACC,eAAT,CAAyB,QAAzB,CAAxB;AACAF,QAAAA,eAAe,CAACG,KAAhB,GAAwBJ,IAAI,CAACK,MAAL,GAAcL,IAAI,CAACK,MAAnB,GAA4B,cAApD;AACAH,QAAAA,QAAQ,CAACI,IAAT,CAAcC,UAAd,CAAyBC,YAAzB,CAAsCP,eAAtC;AACA;AACD,KAND;;AAOA,mBAAeQ,SAAf,GAA2B;AAC1B,YAAMC,IAAI,GAAG,MAAMzB,MAAM,CAAC0B,IAAP,CAAY,qBAAZ,CAAnB;AACAjB,MAAAA,OAAO,CAACgB,IAAD,CAAP;AACAd,MAAAA,SAAS,CAAC,IAAD,CAAT;AACA;;AACDa,IAAAA,SAAS;AACT,GAdQ,EAcN,EAdM,CAAT;;AAgBA,QAAMG,EAAE,GAAGC,CAAC,IAAI;AACfrB,IAAAA,cAAc,CAACqB,CAAC,CAACC,aAAF,CAAgBC,OAAhB,CAAwBC,EAAzB,CAAd;AACA,GAFD;;AAIA,sBACC,oBAAC,IAAD;AAAM,IAAA,WAAW,EAAEzB,WAAnB;AAAgC,IAAA,MAAM,EAAEI,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,MAAT;AAAgB,IAAA,WAAW,EAAEF,WAA7B;AAA0C,IAAA,EAAE,EAAEmB,EAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADD;AAKA,CA9BD;;AAgCA,eAAetB,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport Home from './panels/Home';\nimport Persik from './panels/Persik';\n\nconst App = () => {\n\tconst [activePanel, setActivePanel] = useState('home');\n\tconst [fetchedUser, setUser] = useState(null);\n\tconst [popout, setPopout] = useState(<ScreenSpinner size='large' />);\n\n\tuseEffect(() => {\n\t\tbridge.subscribe(({ detail: { type, data }}) => {\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\n\t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n\t\t\t}\n\t\t});\n\t\tasync function fetchData() {\n\t\t\tconst user = await bridge.send('VKWebAppGetUserInfo');\n\t\t\tsetUser(user);\n\t\t\tsetPopout(null);\n\t\t}\n\t\tfetchData();\n\t}, []);\n\n\tconst go = e => {\n\t\tsetActivePanel(e.currentTarget.dataset.to);\n\t};\n\n\treturn (\n\t\t<View activePanel={activePanel} popout={popout}>\n\t\t\t<Home id='home' fetchedUser={fetchedUser} go={go} />\n\t\t</View>\n\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}