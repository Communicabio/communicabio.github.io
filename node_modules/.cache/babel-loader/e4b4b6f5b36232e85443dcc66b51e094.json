{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../lib/classNames';\nimport getClassName from '../../helpers/getClassName';\nimport ReactDOM from 'react-dom';\nimport { canUseDOM } from '../../lib/dom';\n\nvar isDOMTypeElement = function isDOMTypeElement(element) {\n  return React.isValidElement(element) && typeof element.type === 'string';\n};\n\nvar baseClassName = getClassName('Tooltip');\n\nvar TooltipPortal = /*#__PURE__*/function (_Component) {\n  _inherits(TooltipPortal, _Component);\n\n  var _super = _createSuper(TooltipPortal);\n\n  function TooltipPortal(props) {\n    var _this;\n\n    _classCallCheck(this, TooltipPortal);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"fixedPortal\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"el\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"portalTarget\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"getBoundingTargetRect\", function () {\n      var target = _this.props.target;\n      var targetBounds = target.getBoundingClientRect();\n\n      var portalBounds = _this.portalTarget.getBoundingClientRect();\n\n      return {\n        width: targetBounds.width,\n        height: targetBounds.height,\n        x: targetBounds.left - portalBounds.left,\n        y: targetBounds.top - portalBounds.top\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getRef\", function (el) {\n      return _this.el = el;\n    });\n\n    _this.state = {\n      x: 0,\n      y: 0\n    };\n    _this.fixedPortal = false;\n    var _target = props.target;\n\n    var closestFixed = _target.closest('.FixedLayout');\n\n    var closestHeader = _target.closest('.PanelHeader__in');\n\n    var closestPanel = _target.closest('.Panel__in');\n\n    if (closestFixed || closestHeader) {\n      _this.fixedPortal = true;\n    }\n\n    _this.portalTarget = closestFixed || closestHeader || closestPanel;\n    return _this;\n  }\n\n  _createClass(TooltipPortal, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.document.removeEventListener('click', this.props.onClose);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          offsetY = _this$props.offsetY,\n          offsetX = _this$props.offsetX,\n          alignX = _this$props.alignX,\n          alignY = _this$props.alignY;\n      var coords = this.getBoundingTargetRect();\n      this.document.addEventListener('click', this.props.onClose);\n      this.setState({\n        x: coords.x + offsetX + (alignX === 'right' ? coords.width - this.el.offsetWidth : 0),\n        y: coords.y + (alignY === 'top' ? -this.el.offsetHeight - offsetY : coords.height + offsetY)\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          header = _this$props2.header,\n          text = _this$props2.text,\n          alignX = _this$props2.alignX,\n          alignY = _this$props2.alignY,\n          cornerOffset = _this$props2.cornerOffset;\n      return ReactDOM.createPortal( /*#__PURE__*/React.createElement(\"div\", {\n        className: classNames(baseClassName, \"Tooltip--x-\".concat(alignX), \"Tooltip--y-\".concat(alignY), {\n          'Tooltip--fixed': this.fixedPortal\n        })\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Tooltip__container\",\n        style: {\n          top: this.state.y,\n          left: this.state.x\n        },\n        ref: this.getRef\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Tooltip__corner\",\n        style: _defineProperty({}, alignX, 20 + cornerOffset)\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Tooltip__content\"\n      }, header && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Tooltip__title\"\n      }, header), text && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Tooltip__text\"\n      }, text)))), this.portalTarget);\n    }\n  }, {\n    key: \"document\",\n    get: function get() {\n      return this.context.document || document;\n    }\n  }]);\n\n  return TooltipPortal;\n}(Component);\n\n_defineProperty(TooltipPortal, \"contextTypes\", {\n  document: PropTypes.object,\n  panel: PropTypes.string\n});\n\nvar Tooltip = /*#__PURE__*/function (_Component2) {\n  _inherits(Tooltip, _Component2);\n\n  var _super2 = _createSuper(Tooltip);\n\n  function Tooltip() {\n    var _this2;\n\n    _classCallCheck(this, Tooltip);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this2 = _super2.call.apply(_super2, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this2), \"state\", {\n      ready: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"targetEl\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this2), \"getRef\", function (el) {\n      return _this2.targetEl = el;\n    });\n\n    return _this2;\n  }\n\n  _createClass(Tooltip, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (canUseDOM) {\n        this.targetEl && this.setState({\n          ready: true\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          children = _this$props3.children,\n          isShown = _this$props3.isShown,\n          portalProps = _objectWithoutProperties(_this$props3, [\"children\", \"isShown\"]);\n\n      var child = React.cloneElement(children, _defineProperty({}, isDOMTypeElement(children) ? 'ref' : 'getRootRef', this.getRef));\n\n      if (!isShown || !this.state.ready) {\n        return child;\n      }\n\n      return /*#__PURE__*/React.createElement(Fragment, null, child, /*#__PURE__*/React.createElement(TooltipPortal, _extends({}, portalProps, {\n        target: this.targetEl\n      })));\n    }\n  }]);\n\n  return Tooltip;\n}(Component);\n\n_defineProperty(Tooltip, \"defaultProps\", {\n  offsetX: 0,\n  offsetY: 15,\n  alignX: 'left',\n  alignY: 'bottom',\n  cornerOffset: 0,\n  isShown: true\n});\n\nexport { Tooltip as default };","map":{"version":3,"sources":["../../../../src/components/Tooltip/Tooltip.tsx"],"names":["isDOMTypeElement","React","element","baseClassName","getClassName","TooltipPortal","Component","x","y","target","props","closestFixed","closestHeader","closestPanel","document","PropTypes","panel","string","targetBounds","portalBounds","width","height","top","offsetY","offsetX","alignX","alignY","coords","header","text","cornerOffset","ReactDOM","classNames","fixedPortal","left","getRef","Tooltip","isShown","ready","children","portalProps","child","targetEl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,SAAA,EAAA,QAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,UAAA,MAAA,sBAAA;AACA,OAAA,YAAA,MAAA,4BAAA;AACA,OAAA,QAAA,MAAA,WAAA;AAEA,SAAA,SAAA,QAAA,eAAA;;AAuBA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,OAAA,EAA2B;AAClD,SAAOC,KAAK,CAALA,cAAAA,CAAAA,OAAAA,KAAiC,OAAOC,OAAO,CAAd,IAAA,KAAxC,QAAA;AADF,CAAA;;AAIA,IAAMC,aAAa,GAAGC,YAAY,CAAlC,SAAkC,CAAlC;;IAEMC,a;;;;;AACJ,WAAA,aAAA,CAAA,KAAA,EAAuC;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,CAAA;;AACrC,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA;;AADqC,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,aAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,IAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,cAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,uBAAA,EAqCQ,YAAM;AAAA,UAC3CI,MAD2C,GAChC,KAAA,CADgC,KAChC,CADgC,MAAA;AAEnD,UAAMS,YAAY,GAAGT,MAAM,CAA3B,qBAAqBA,EAArB;;AACA,UAAMU,YAAY,GAAG,KAAA,CAAA,YAAA,CAArB,qBAAqB,EAArB;;AAEA,aAAO;AACLC,QAAAA,KAAK,EAAEF,YAAY,CADd,KAAA;AAELG,QAAAA,MAAM,EAAEH,YAAY,CAFf,MAAA;AAGLX,QAAAA,CAAC,EAAEW,YAAY,CAAZA,IAAAA,GAAoBC,YAAY,CAH9B,IAAA;AAILX,QAAAA,CAAC,EAAEU,YAAY,CAAZA,GAAAA,GAAmBC,YAAY,CAACG;AAJ9B,OAAP;AA1CqC,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,QAAA,EAkEN,UAAA,EAAA,EAAA;AAAA,aAAwB,KAAA,CAAA,EAAA,GAAxB,EAAA;AAlEM,KAAA,CAAA;;AAGrC,IAAA,KAAA,CAAA,KAAA,GAAa;AACXf,MAAAA,CAAC,EADU,CAAA;AAEXC,MAAAA,CAAC,EAAE;AAFQ,KAAb;AAKA,IAAA,KAAA,CAAA,WAAA,GAAA,KAAA;AARqC,QAU7BC,OAV6B,GAUlBC,KAVkB,CAAA,MAAA;;AAWrC,QAAMC,YAAY,GAAGF,OAAM,CAANA,OAAAA,CAArB,cAAqBA,CAArB;;AACA,QAAMG,aAAa,GAAGH,OAAM,CAANA,OAAAA,CAAtB,kBAAsBA,CAAtB;;AACA,QAAMI,YAAY,GAAGJ,OAAM,CAANA,OAAAA,CAArB,YAAqBA,CAArB;;AAEA,QAAIE,YAAY,IAAhB,aAAA,EAAmC;AACjC,MAAA,KAAA,CAAA,WAAA,GAAA,IAAA;AACD;;AAED,IAAA,KAAA,CAAA,YAAA,GAAoBA,YAAY,IAAZA,aAAAA,IAApB,YAAA;AAnBqC,WAAA,KAAA;AAoBtC;;;;2CA8BsB;AACrB,WAAA,QAAA,CAAA,mBAAA,CAAA,OAAA,EAA2C,KAAA,KAAA,CAA3C,OAAA;AACD;;;wCAEmB;AAAA,UAAA,WAAA,GAC2B,KAD3B,KAAA;AAAA,UACVY,OADU,GAAA,WAAA,CAAA,OAAA;AAAA,UACDC,OADC,GAAA,WAAA,CAAA,OAAA;AAAA,UACQC,MADR,GAAA,WAAA,CAAA,MAAA;AAAA,UACgBC,MADhB,GAAA,WAAA,CAAA,MAAA;AAElB,UAAMC,MAAM,GAAG,KAAf,qBAAe,EAAf;AAEA,WAAA,QAAA,CAAA,gBAAA,CAAA,OAAA,EAAwC,KAAA,KAAA,CAAxC,OAAA;AAEA,WAAA,QAAA,CAAc;AACZpB,QAAAA,CAAC,EAAEoB,MAAM,CAANA,CAAAA,GAAAA,OAAAA,IAAsBF,MAAM,KAANA,OAAAA,GAAqBE,MAAM,CAANA,KAAAA,GAAe,KAAA,EAAA,CAApCF,WAAAA,GADb,CACTE,CADS;AAEZnB,QAAAA,CAAC,EAAEmB,MAAM,CAANA,CAAAA,IAAYD,MAAM,KAANA,KAAAA,GAAmB,CAAC,KAAA,EAAA,CAAD,YAAA,GAAnBA,OAAAA,GAAqDC,MAAM,CAANA,MAAAA,GAAjEA,OAAAA;AAFS,OAAd;AAID;;;6BAIQ;AAAA,UAAA,YAAA,GACgD,KADhD,KAAA;AAAA,UACCC,MADD,GAAA,YAAA,CAAA,MAAA;AAAA,UACSC,IADT,GAAA,YAAA,CAAA,IAAA;AAAA,UACeJ,MADf,GAAA,YAAA,CAAA,MAAA;AAAA,UACuBC,MADvB,GAAA,YAAA,CAAA,MAAA;AAAA,UAC+BI,YAD/B,GAAA,YAAA,CAAA,YAAA;AAGP,aAAOC,QAAQ,CAARA,YAAAA,EAAAA,aACL,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,SAAS,EACZC,UAAU,CAAA,aAAA,EAAA,cAAA,MAAA,CAAA,MAAA,CAAA,EAAA,cAAA,MAAA,CAAA,MAAA,CAAA,EAIR;AACE,4BAAkB,KAAKC;AADzB,SAJQ;AADZ,OAAA,EAAA,aASE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,SAAS,EAAd,oBAAA;AAAoC,QAAA,KAAK,EAAE;AAAEX,UAAAA,GAAG,EAAE,KAAA,KAAA,CAAP,CAAA;AAAqBY,UAAAA,IAAI,EAAE,KAAA,KAAA,CAAW3B;AAAtC,SAA3C;AAAsF,QAAA,GAAG,EAAE,KAAK4B;AAAhG,OAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,SAAS,EAAd,iBAAA;AAAiC,QAAA,KAAK,EAAA,eAAA,CAAA,EAAA,EAAA,MAAA,EAAc,KAAd,YAAA;AAAtC,OAAA,CADF,EAAA,aAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,SAAS,EAAC;AAAf,OAAA,EACGP,MAAM,IAAA,aAAI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,SAAS,EAAC;AAAf,OAAA,EADb,MACa,CADb,EAEGC,IAAI,IAAA,aAAI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,SAAS,EAAC;AAAf,OAAA,EAdVE,IAcU,CAFX,CAFF,CATF,CADKA,EAiBG,KAjBV,YAAOA,CAAP;AAkBD;;;wBA9Dc;AACb,aAAO,KAAA,OAAA,CAAA,QAAA,IAAP,QAAA;AACD;;;;EA9ByBzB,S;;gBAAtBD,a,kBAuB4C;AAC9CS,EAAAA,QAAQ,EAAEC,SAAS,CAD2B,MAAA;AAE9CC,EAAAA,KAAK,EAAED,SAAS,CAACE;AAF6B,C;;IAuH7BmB,O;;;;;;;;;;;;;;;;6DAUG;AACpBE,MAAAA,KAAK,EAAE;AADa,K;;;;8DAYW,UAAA,EAAA,EAAA;AAAA,aAAwB,MAAA,CAAA,QAAA,GAAxB,EAAA;;;;;;;;wCANb;AAClB,UAAA,SAAA,EAAe;AACb,aAAA,QAAA,IAAiB,KAAA,QAAA,CAAc;AAAEA,UAAAA,KAAK,EAAE;AAAT,SAAd,CAAjB;AACD;AACF;;;6BAIQ;AAAA,UAAA,YAAA,GACuC,KADvC,KAAA;AAAA,UACCC,QADD,GAAA,YAAA,CAAA,QAAA;AAAA,UACWF,OADX,GAAA,YAAA,CAAA,OAAA;AAAA,UACuBG,WADvB,GAAA,wBAAA,CAAA,YAAA,EAAA,CAAA,UAAA,EAAA,SAAA,CAAA,CAAA;;AAGP,UAAMC,KAAK,GAAGxC,KAAK,CAALA,YAAAA,CAAAA,QAAAA,EAAAA,eAAAA,CAAAA,EAAAA,EACXD,gBAAgB,CAAhBA,QAAgB,CAAhBA,GAAAA,KAAAA,GADWC,YAAAA,EACyD,KADvE,MAAcA,CAAAA,CAAd;;AAIA,UAAI,CAAA,OAAA,IAAY,CAAC,KAAA,KAAA,CAAjB,KAAA,EAAmC;AACjC,eAAA,KAAA;AACD;;AAED,aAAA,aACE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,IAAA,EAAA,KAAA,EAAA,aAEE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA,QAAA,CAAA,EAAA,EAAA,WAAA,EAAA;AAAgC,QAAA,MAAM,EAAE,KAAKyC;AAA7C,OAAA,CAAA,CAFF,CADF;AAMD;;;;EAzCkCpC,S;;gBAAhB8B,O,kBAC0B;AAC3CZ,EAAAA,OAAO,EADoC,CAAA;AAE3CD,EAAAA,OAAO,EAFoC,EAAA;AAG3CE,EAAAA,MAAM,EAHqC,MAAA;AAI3CC,EAAAA,MAAM,EAJqC,QAAA;AAK3CI,EAAAA,YAAY,EAL+B,CAAA;AAM3CO,EAAAA,OAAO,EAAE;AANkC,C;;SAD1BD,O","sourcesContent":["import React, { ReactElement, ReactNode, Component, Fragment } from 'react';\nimport PropTypes, { Requireable } from 'prop-types';\nimport classNames from '../../lib/classNames';\nimport getClassName from '../../helpers/getClassName';\nimport ReactDOM from 'react-dom';\nimport { OldRef } from '../../types';\nimport { canUseDOM } from '../../lib/dom';\n\ninterface TooltipPortalProps extends Partial<TooltipProps> {\n  target?: HTMLElement;\n}\n\ninterface TooltipPortalState {\n  x: number;\n  y: number;\n}\n\ninterface TooltipPortalContextType {\n  document: Requireable<{}>;\n  panel: Requireable<string>;\n}\n\ntype GetBoundingTargetRect = () => {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n};\n\nconst isDOMTypeElement = (element: ReactElement) => {\n  return React.isValidElement(element) && typeof element.type === 'string';\n};\n\nconst baseClassName = getClassName('Tooltip');\n\nclass TooltipPortal extends Component<TooltipPortalProps, TooltipPortalState> {\n  constructor(props: TooltipPortalProps) {\n    super(props);\n\n    this.state = {\n      x: 0,\n      y: 0,\n    };\n\n    this.fixedPortal = false;\n\n    const { target } = props;\n    const closestFixed = target.closest<HTMLElement>('.FixedLayout');\n    const closestHeader = target.closest<HTMLElement>('.PanelHeader__in');\n    const closestPanel = target.closest<HTMLElement>('.Panel__in');\n\n    if (closestFixed || closestHeader) {\n      this.fixedPortal = true;\n    }\n\n    this.portalTarget = closestFixed || closestHeader || closestPanel;\n  }\n\n  static contextTypes: TooltipPortalContextType = {\n    document: PropTypes.object,\n    panel: PropTypes.string,\n  };\n\n  get document() {\n    return this.context.document || document;\n  }\n\n  fixedPortal: boolean;\n\n  el: HTMLDivElement;\n\n  portalTarget: HTMLElement;\n\n  getBoundingTargetRect: GetBoundingTargetRect = () => {\n    const { target } = this.props;\n    const targetBounds = target.getBoundingClientRect();\n    const portalBounds = this.portalTarget.getBoundingClientRect();\n\n    return {\n      width: targetBounds.width,\n      height: targetBounds.height,\n      x: targetBounds.left - portalBounds.left,\n      y: targetBounds.top - portalBounds.top,\n    };\n  };\n\n  componentWillUnmount() {\n    this.document.removeEventListener('click', this.props.onClose);\n  }\n\n  componentDidMount() {\n    const { offsetY, offsetX, alignX, alignY } = this.props;\n    const coords = this.getBoundingTargetRect();\n\n    this.document.addEventListener('click', this.props.onClose);\n\n    this.setState({\n      x: coords.x + offsetX + (alignX === 'right' ? coords.width - this.el.offsetWidth : 0),\n      y: coords.y + (alignY === 'top' ? -this.el.offsetHeight - offsetY : coords.height + offsetY),\n    });\n  }\n\n  getRef: OldRef<HTMLDivElement> = (el: HTMLDivElement) => this.el = el;\n\n  render() {\n    const { header, text, alignX, alignY, cornerOffset } = this.props;\n\n    return ReactDOM.createPortal(\n      <div className={\n        classNames(\n          baseClassName,\n          `Tooltip--x-${alignX}`,\n          `Tooltip--y-${alignY}`,\n          {\n            'Tooltip--fixed': this.fixedPortal,\n          },\n        )}>\n        <div className=\"Tooltip__container\" style={{ top: this.state.y, left: this.state.x }} ref={this.getRef}>\n          <div className=\"Tooltip__corner\" style={{ [alignX]: 20 + cornerOffset }} />\n          <div className=\"Tooltip__content\">\n            {header && <div className=\"Tooltip__title\">{header}</div>}\n            {text && <div className=\"Tooltip__text\">{text}</div>}\n          </div>\n        </div>\n      </div>, this.portalTarget);\n  }\n}\n\nexport interface TooltipProps {\n  /**\n   * **Важно**: если в `children` передан React-компонент, то необходимо убедиться в том, что он поддерживает\n   * свойство `getRootRef`, которое должно возвращаться ссылку на корневой DOM-элемент компонента,\n   * иначе тултип показан не будет. Если передан React-element, то такой проблемы нет.\n   */\n  children: ReactNode;\n  /**\n   * Если передан `false`, то рисуется просто `children`.\n   */\n  isShown: boolean;\n  /**\n   * Текст тултипа.\n   */\n  text?: ReactNode;\n  /**\n   * Заголовок тултипа.\n   */\n  header?: ReactNode;\n  /**\n   * Положение по горизонтали (прижатие к левому или правому краю `children`).\n   */\n  alignX?: 'left' | 'right';\n  /**\n   * Положение по вертикали (расположение над или под `children`).\n   */\n  alignY?: 'top' | 'bottom';\n  /**\n   * Сдвиг по горизонтали (относительно портала, в котором рисуется тултип).\n   */\n  offsetX?: number;\n  /**\n   * Сдвиг по вертикали (относительно портала, в котором рисуется тултип).\n   */\n  offsetY?: number;\n  /**\n   * Сдвиг треугольника (относительно ширины тултипа).\n   */\n  cornerOffset?: number;\n  /**\n   * Callback, который вызывается при клике по любому месту в пределах экрана.\n   */\n  onClose(): void;\n}\n\nexport interface TooltipState {\n  ready: boolean;\n}\n\nexport default class Tooltip extends Component<TooltipProps, TooltipState> {\n  static defaultProps: Partial<TooltipProps> = {\n    offsetX: 0,\n    offsetY: 15,\n    alignX: 'left',\n    alignY: 'bottom',\n    cornerOffset: 0,\n    isShown: true,\n  };\n\n  state: TooltipState = {\n    ready: false,\n  };\n\n  targetEl: HTMLElement;\n\n  componentDidMount() {\n    if (canUseDOM) {\n      this.targetEl && this.setState({ ready: true });\n    }\n  }\n\n  getRef: OldRef<HTMLDivElement> = (el: HTMLDivElement) => this.targetEl = el;\n\n  render() {\n    const { children, isShown, ...portalProps } = this.props;\n\n    const child = React.cloneElement(children as ReactElement, {\n      [isDOMTypeElement(children as ReactElement) ? 'ref' : 'getRootRef']: this.getRef,\n    });\n\n    if (!isShown || !this.state.ready) {\n      return child;\n    }\n\n    return (\n      <Fragment>\n        {child}\n        <TooltipPortal {...portalProps} target={this.targetEl} />\n      </Fragment>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}