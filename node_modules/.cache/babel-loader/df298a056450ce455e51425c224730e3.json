{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport React, { Component } from 'react';\nimport FixedLayout from '../FixedLayout/FixedLayout';\nimport classNames from '../../lib/classNames';\nimport getClassName from '../../helpers/getClassName';\nimport transitionEvents from '../../lib/transitionEvents';\nimport withPlatform from '../../hoc/withPlatform';\n\nvar PanelHeaderContext = /*#__PURE__*/function (_Component) {\n  _inherits(PanelHeaderContext, _Component);\n\n  var _super = _createSuper(PanelHeaderContext);\n\n  function PanelHeaderContext() {\n    var _this;\n\n    _classCallCheck(this, PanelHeaderContext);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      closing: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"elementRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"onAnimationFinish\", function () {\n      _this.setState({\n        closing: false\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(PanelHeaderContext, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.opened !== prevProps.opened) {\n        if (this.props.opened === false) {\n          this.setState({\n            closing: true\n          });\n          this.waitAnimationFinish(this.onAnimationFinish);\n        }\n      }\n    }\n  }, {\n    key: \"waitAnimationFinish\",\n    value: function waitAnimationFinish(eventHandler) {\n      var eventName = transitionEvents.animationEndEventName;\n      var element = this.elementRef.current;\n\n      if (element) {\n        element.removeEventListener(eventName, eventHandler);\n        element.addEventListener(eventName, eventHandler);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          className = _this$props.className,\n          opened = _this$props.opened,\n          onClose = _this$props.onClose,\n          platform = _this$props.platform,\n          restProps = _objectWithoutProperties(_this$props, [\"children\", \"className\", \"opened\", \"onClose\", \"platform\"]);\n\n      var closing = this.state.closing;\n      var baseClassNames = getClassName('PanelHeaderContext', platform);\n      return /*#__PURE__*/React.createElement(FixedLayout, _extends({}, restProps, {\n        className: classNames(baseClassNames, {\n          'PanelHeaderContext--opened': opened,\n          'PanelHeaderContext--closing': closing\n        }, className),\n        vertical: \"top\"\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"PanelHeaderContext__in\",\n        ref: this.elementRef\n      }, (opened || closing) && children), (opened || closing) && /*#__PURE__*/React.createElement(\"div\", {\n        onClick: onClose,\n        className: \"PanelHeaderContext__fade\"\n      }));\n    }\n  }]);\n\n  return PanelHeaderContext;\n}(Component);\n\n_defineProperty(PanelHeaderContext, \"defaultProps\", {\n  opened: false\n});\n\nexport default withPlatform(PanelHeaderContext);","map":{"version":3,"sources":["../../../../src/components/PanelHeaderContext/PanelHeaderContext.tsx"],"names":["PanelHeaderContext","Component","opened","closing","React","prevProps","eventHandler","eventName","transitionEvents","element","children","className","onClose","platform","restProps","baseClassNames","getClassName","classNames","elementRef","withPlatform"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,SAAA,QAAA,OAAA;AACA,OAAA,WAAA,MAAA,4BAAA;AACA,OAAA,UAAA,MAAA,sBAAA;AACA,OAAA,YAAA,MAAA,4BAAA;AACA,OAAA,gBAAA,MAAA,4BAAA;AACA,OAAA,YAAA,MAAA,wBAAA;;IAYMA,kB;;;;;;;;;;;;;;;;4DAK6B;AAC/BG,MAAAA,OAAO,EAAE;AADsB,K;;iEAIOC,KAAK,CAALA,SAAAA,E;;wEAqBN,YAAM;AACtC,MAAA,KAAA,CAAA,QAAA,CAAc;AAAED,QAAAA,OAAO,EAAE;AAAX,OAAd;;;;;;;;uCApBiBE,S,EAAoC;AACrD,UAAI,KAAA,KAAA,CAAA,MAAA,KAAsBA,SAAS,CAAnC,MAAA,EAA4C;AAC1C,YAAI,KAAA,KAAA,CAAA,MAAA,KAAJ,KAAA,EAAiC;AAC/B,eAAA,QAAA,CAAc;AAAEF,YAAAA,OAAO,EAAE;AAAX,WAAd;AACA,eAAA,mBAAA,CAAyB,KAAzB,iBAAA;AACD;AACF;AACF;;;wCAEmBG,Y,EAA4B;AAC9C,UAAMC,SAAS,GAAGC,gBAAgB,CAAlC,qBAAA;AACA,UAAMC,OAAO,GAAG,KAAA,UAAA,CAAhB,OAAA;;AAEA,UAAA,OAAA,EAAa;AACXA,QAAAA,OAAO,CAAPA,mBAAAA,CAAAA,SAAAA,EAAAA,YAAAA;AACAA,QAAAA,OAAO,CAAPA,gBAAAA,CAAAA,SAAAA,EAAAA,YAAAA;AACD;AACF;;;6BAMQ;AAAA,UAAA,WAAA,GACkE,KADlE,KAAA;AAAA,UACCC,QADD,GAAA,WAAA,CAAA,QAAA;AAAA,UACWC,SADX,GAAA,WAAA,CAAA,SAAA;AAAA,UACsBT,MADtB,GAAA,WAAA,CAAA,MAAA;AAAA,UAC8BU,OAD9B,GAAA,WAAA,CAAA,OAAA;AAAA,UACuCC,QADvC,GAAA,WAAA,CAAA,QAAA;AAAA,UACoDC,SADpD,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,UAAA,EAAA,WAAA,EAAA,QAAA,EAAA,SAAA,EAAA,UAAA,CAAA,CAAA;;AAAA,UAECX,OAFD,GAEa,KAFb,KAEa,CAFb,OAAA;AAGP,UAAMY,cAAc,GAAGC,YAAY,CAAA,oBAAA,EAAnC,QAAmC,CAAnC;AAEA,aAAA,aACE,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA,QAAA,CAAA,EAAA,EAAA,SAAA,EAAA;AAA4B,QAAA,SAAS,EAAEC,UAAU,CAAA,cAAA,EAAiB;AAChE,wCADgE,MAAA;AAEhE,yCAA+Bd;AAFiC,SAAjB,EAAjD,SAAiD,CAAjD;AAGe,QAAA,QAAQ,EAAC;AAHxB,OAAA,CAAA,EAAA,aAIE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,SAAS,EAAd,wBAAA;AAAwC,QAAA,GAAG,EAAE,KAAKe;AAAlD,OAAA,EACG,CAAChB,MAAM,IAAP,OAAA,KALL,QAIE,CAJF,EAOG,CAACA,MAAM,IAAP,OAAA,KAAA,aAAuB,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,OAAO,EAAZ,OAAA;AAAuB,QAAA,SAAS,EAAC;AAAjC,OAAA,CAP1B,CADF;AAWD;;;;EAlD8BD,S;;gBAA3BD,kB,kBACoD;AACtDE,EAAAA,MAAM,EAAE;AAD8C,C;;AAoD1D,eAAeiB,YAAY,CAA3B,kBAA2B,CAA3B","sourcesContent":["import React, { Component, HTMLAttributes, RefObject } from 'react';\nimport FixedLayout from '../FixedLayout/FixedLayout';\nimport classNames from '../../lib/classNames';\nimport getClassName from '../../helpers/getClassName';\nimport transitionEvents from '../../lib/transitionEvents';\nimport withPlatform from '../../hoc/withPlatform';\nimport { HasPlatform } from '../../types';\n\nexport interface PanelHeaderContextProps extends HTMLAttributes<HTMLDivElement>, HasPlatform {\n  opened: boolean;\n  onClose(): void;\n}\n\nexport interface PanelHeaderContextState {\n  closing: boolean;\n}\n\nclass PanelHeaderContext extends Component<PanelHeaderContextProps, PanelHeaderContextState> {\n  static defaultProps: Partial<PanelHeaderContextProps> = {\n    opened: false,\n  };\n\n  state: PanelHeaderContextState = {\n    closing: false,\n  };\n\n  elementRef: RefObject<HTMLDivElement> = React.createRef();\n\n  componentDidUpdate(prevProps: PanelHeaderContextProps) {\n    if (this.props.opened !== prevProps.opened) {\n      if (this.props.opened === false) {\n        this.setState({ closing: true });\n        this.waitAnimationFinish(this.onAnimationFinish);\n      }\n    }\n  }\n\n  waitAnimationFinish(eventHandler: VoidFunction) {\n    const eventName = transitionEvents.animationEndEventName;\n    const element = this.elementRef.current;\n\n    if (element) {\n      element.removeEventListener(eventName, eventHandler);\n      element.addEventListener(eventName, eventHandler);\n    }\n  }\n\n  onAnimationFinish: VoidFunction = () => {\n    this.setState({ closing: false });\n  };\n\n  render() {\n    const { children, className, opened, onClose, platform, ...restProps } = this.props;\n    const { closing } = this.state;\n    const baseClassNames = getClassName('PanelHeaderContext', platform);\n\n    return (\n      <FixedLayout {...restProps} className={classNames(baseClassNames, {\n        'PanelHeaderContext--opened': opened,\n        'PanelHeaderContext--closing': closing,\n      }, className)} vertical=\"top\">\n        <div className=\"PanelHeaderContext__in\" ref={this.elementRef}>\n          {(opened || closing) && children}\n        </div>\n        {(opened || closing) && <div onClick={onClose} className=\"PanelHeaderContext__fade\" />}\n      </FixedLayout>\n    );\n  }\n}\n\nexport default withPlatform(PanelHeaderContext);\n"]},"metadata":{},"sourceType":"module"}