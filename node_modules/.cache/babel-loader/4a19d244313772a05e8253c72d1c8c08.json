{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React, { useContext } from 'react';\nimport usePlatform from '../../hooks/usePlatform';\nimport getClassname from '../../helpers/getClassName';\nimport classNames from '../../lib/classNames';\nimport FixedLayout from '../FixedLayout/FixedLayout';\nimport Separator from '../Separator/Separator';\nimport { ANDROID } from '../../lib/platform';\nimport { ConfigProviderContext, WebviewType } from '../ConfigProvider/ConfigProviderContext';\nimport { PanelContext } from '../Panel/PanelContext';\n\nvar PanelHeader = function PanelHeader(_ref) {\n  var className = _ref.className,\n      left = _ref.left,\n      addon = _ref.addon,\n      children = _ref.children,\n      right = _ref.right,\n      separator = _ref.separator,\n      visor = _ref.visor,\n      transparent = _ref.transparent,\n      getRef = _ref.getRef,\n      getRootRef = _ref.getRootRef,\n      restProps = _objectWithoutProperties(_ref, [\"className\", \"left\", \"addon\", \"children\", \"right\", \"separator\", \"visor\", \"transparent\", \"getRef\", \"getRootRef\"]);\n\n  var platform = usePlatform();\n\n  var _useContext = useContext(ConfigProviderContext),\n      webviewType = _useContext.webviewType;\n\n  var panelContext = useContext(PanelContext);\n  var needSeparator = separator;\n\n  if (typeof separator !== 'boolean') {\n    needSeparator = panelContext.separator;\n  }\n\n  var isPrimitive = typeof children === 'string' || typeof children === 'number';\n  return /*#__PURE__*/React.createElement(\"div\", _extends({}, restProps, {\n    className: classNames(getClassname('PanelHeader', platform), {\n      'PanelHeader--trnsp': transparent,\n      'PanelHeader--vis': visor,\n      'PanelHeader--sep': needSeparator && visor,\n      'PanelHeader--vkapps': webviewType === WebviewType.VKAPPS,\n      'PanelHeader--no-left': left === undefined,\n      'PanelHeader--no-right': right === undefined\n    }, className),\n    ref: getRootRef\n  }), /*#__PURE__*/React.createElement(FixedLayout, {\n    vertical: \"top\",\n    className: \"PanelHeader__fixed\",\n    getRootRef: getRef\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"PanelHeader__in\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"PanelHeader__left\"\n  }, left, platform !== ANDROID && addon), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"PanelHeader__content\"\n  }, isPrimitive ? /*#__PURE__*/React.createElement(\"span\", null, children) : children), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"PanelHeader__right\"\n  }, webviewType !== WebviewType.VKAPPS && right))), needSeparator && visor && /*#__PURE__*/React.createElement(Separator, {\n    className: \"PanelHeader__separator\"\n  }));\n};\n\nPanelHeader.defaultProps = {\n  separator: true,\n  transparent: false,\n  visor: true\n};\nexport default PanelHeader;","map":{"version":3,"sources":["../../../../src/components/PanelHeader/PanelHeader.tsx"],"names":["PanelHeader","className","left","addon","children","right","separator","visor","transparent","getRef","getRootRef","restProps","platform","usePlatform","webviewType","useContext","panelContext","needSeparator","isPrimitive","classNames","getClassname","WebviewType","undefined"],"mappings":"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","sourcesContent":["import React, { HTMLAttributes, ReactNode, useContext } from 'react';\nimport usePlatform from '../../hooks/usePlatform';\nimport getClassname from '../../helpers/getClassName';\nimport classNames from '../../lib/classNames';\nimport FixedLayout from '../FixedLayout/FixedLayout';\nimport Separator from '../Separator/Separator';\nimport { ANDROID } from '../../lib/platform';\nimport { HasRef, HasRootRef } from '../../types';\nimport { ConfigProviderContext, WebviewType } from '../ConfigProvider/ConfigProviderContext';\nimport { PanelContext } from '../Panel/PanelContext';\n\nexport interface PanelHeaderProps extends HTMLAttributes<HTMLDivElement>, HasRef<HTMLDivElement>, HasRootRef<HTMLDivElement> {\n  left?: ReactNode;\n  /**\n   * @deprecated будет удалено в 4-й версии. Раньше использовалось, как текстовое дополнение к PanelHeaderBack в iOS.\n   */\n  addon?: ReactNode;\n  right?: ReactNode;\n  separator?: boolean;\n  transparent?: boolean;\n  /**\n   * Если `false`, то шапка будет нулевой высоты и контент панели \"залезет\" под неё\n   */\n  visor?: boolean;\n}\n\nconst PanelHeader = ({\n  className,\n  left,\n  addon,\n  children,\n  right,\n  separator,\n  visor,\n  transparent,\n  getRef,\n  getRootRef,\n  ...restProps\n}: PanelHeaderProps) => {\n  const platform = usePlatform();\n  const { webviewType } = useContext(ConfigProviderContext);\n  const panelContext = useContext(PanelContext);\n  let needSeparator = separator;\n\n  if (typeof separator !== 'boolean') {\n    needSeparator = panelContext.separator;\n  }\n\n  const isPrimitive = typeof children === 'string' || typeof children === 'number';\n\n  return (\n    <div\n      {...restProps}\n      className={\n        classNames(\n          getClassname('PanelHeader', platform),\n          {\n            'PanelHeader--trnsp': transparent,\n            'PanelHeader--vis': visor,\n            'PanelHeader--sep': needSeparator && visor,\n            'PanelHeader--vkapps': webviewType === WebviewType.VKAPPS,\n            'PanelHeader--no-left': left === undefined,\n            'PanelHeader--no-right': right === undefined,\n          },\n          className,\n        )\n      }\n      ref={getRootRef}\n    >\n      <FixedLayout vertical=\"top\" className=\"PanelHeader__fixed\" getRootRef={getRef}>\n        <div className=\"PanelHeader__in\">\n          <div className=\"PanelHeader__left\">\n            {left}\n            {platform !== ANDROID && addon}\n          </div>\n          <div className=\"PanelHeader__content\">\n            {isPrimitive ? <span>{children}</span> : children}\n          </div>\n          <div className=\"PanelHeader__right\">\n            {webviewType !== WebviewType.VKAPPS && right}\n          </div>\n        </div>\n      </FixedLayout>\n      {needSeparator && visor && <Separator className=\"PanelHeader__separator\" />}\n    </div>\n  );\n};\n\nPanelHeader.defaultProps = {\n  separator: true,\n  transparent: false,\n  visor: true,\n};\n\nexport default PanelHeader;\n"]},"metadata":{},"sourceType":"module"}