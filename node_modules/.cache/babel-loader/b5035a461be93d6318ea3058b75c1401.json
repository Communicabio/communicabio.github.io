{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/typeof\";\nexport default function classNames() {\n  var result = [];\n\n  for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {\n    classnames[_key] = arguments[_key];\n  }\n\n  classnames.forEach(function (item) {\n    if (!item) {\n      return;\n    }\n\n    switch (_typeof(item)) {\n      case 'string':\n        result.push(item);\n        break;\n\n      case 'object':\n        Object.keys(item).forEach(function (key) {\n          if (item[key]) {\n            result.push(key);\n          }\n        });\n        break;\n\n      default:\n        result.push(\"\".concat(item));\n    }\n  });\n  return result.join(' ');\n}","map":{"version":3,"sources":["../../../src/lib/classNames.ts"],"names":["classnames","result","Object","item"],"mappings":";AAMA,eAAe,SAAA,UAAA,GAAgD;AAC7D,MAAIC,MAAgB,GAApB,EAAA;;AAD6D,OAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAzBD,UAAyB,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAAzBA,IAAAA,UAAyB,CAAA,IAAA,CAAzBA,GAAyB,SAAA,CAAA,IAAA,CAAzBA;AAAyB;;AAG7DA,EAAAA,UAAU,CAAVA,OAAAA,CAAmB,UAAA,IAAA,EAA2B;AAC5C,QAAI,CAAJ,IAAA,EAAW;AACT;AACD;;AACD,YAAA,OAAA,CAAA,IAAA,CAAA;AACE,WAAA,QAAA;AACEC,QAAAA,MAAM,CAANA,IAAAA,CAAAA,IAAAA;AACA;;AACF,WAAA,QAAA;AACEC,QAAAA,MAAM,CAANA,IAAAA,CAAAA,IAAAA,EAAAA,OAAAA,CAA0B,UAAA,GAAA,EAAiB;AACzC,cAAIC,IAAI,CAAR,GAAQ,CAAR,EAAe;AACbF,YAAAA,MAAM,CAANA,IAAAA,CAAAA,GAAAA;AACD;AAHHC,SAAAA;AAKA;;AACF;AACED,QAAAA,MAAM,CAANA,IAAAA,CAAAA,GAAAA,MAAAA,CAAAA,IAAAA,CAAAA;AAZJ;AAJFD,GAAAA;AAoBA,SAAOC,MAAM,CAANA,IAAAA,CAAP,GAAOA,CAAP;AACD","sourcesContent":["export interface ObjectClassNames {\n  [index: string]: boolean;\n}\n\nexport type ClassName = number | string | ObjectClassNames | false | null | undefined;\n\nexport default function classNames(...classnames: ClassName[]) {\n  let result: string[] = [];\n\n  classnames.forEach((item: ClassName): void => {\n    if (!item) {\n      return;\n    }\n    switch (typeof item) {\n      case 'string':\n        result.push(item);\n        break;\n      case 'object':\n        Object.keys(item).forEach((key: string) => {\n          if (item[key]) {\n            result.push(key);\n          }\n        });\n        break;\n      default:\n        result.push(`${item}`);\n    }\n  });\n\n  return result.join(' ');\n}\n"]},"metadata":{},"sourceType":"module"}