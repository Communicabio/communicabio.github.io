{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.platform = platform;\nexports.IS_PLATFORM_ANDROID = exports.IS_PLATFORM_IOS = exports.IOS = exports.ANDROID = exports.OS = void 0;\n\nvar _dom = require(\"./dom\");\n\nvar OS;\nexports.OS = OS;\n\n(function (OS) {\n  OS[\"ANDROID\"] = \"android\";\n  OS[\"IOS\"] = \"ios\";\n})(OS || (exports.OS = OS = {}));\n\nvar ANDROID = OS.ANDROID;\nexports.ANDROID = ANDROID;\nvar IOS = OS.IOS;\nexports.IOS = IOS;\n\nfunction platform(useragent) {\n  var ua = useragent || _dom.canUseDOM && navigator.userAgent || '';\n  return /android/i.test(ua) ? ANDROID : IOS;\n}\n\nvar osname = platform();\n/**\n * @deprecated для определения платформы используйте withPlatform или usePlatform\n */\n\nvar IS_PLATFORM_IOS = osname === IOS;\n/**\n * @deprecated для определения платформы используйте withPlatform или usePlatform\n */\n\nexports.IS_PLATFORM_IOS = IS_PLATFORM_IOS;\nvar IS_PLATFORM_ANDROID = osname === ANDROID;\nexports.IS_PLATFORM_ANDROID = IS_PLATFORM_ANDROID;","map":{"version":3,"sources":["../../src/lib/platform.ts"],"names":["OS","ANDROID","IOS","ua","useragent","canUseDOM","navigator","osname","platform","IS_PLATFORM_IOS","IS_PLATFORM_ANDROID"],"mappings":";;;;;;;;AAAA,IAAA,IAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;IAEYA,E;;;WAAAA,E;AAAAA,EAAAA,E,WAAAA,G,SAAAA;AAAAA,EAAAA,E,OAAAA,G,KAAAA;GAAAA,E,kBAAAA,E;;AAKL,IAAMC,OAAO,GAAGD,EAAE,CAAlB,OAAA;;AACA,IAAME,GAAG,GAAGF,EAAE,CAAd,GAAA;;;AAIA,SAAA,QAAA,CAAA,SAAA,EAA8C;AACnD,MAAMG,EAAE,GAAGC,SAAS,IAAIC,IAAAA,CAAAA,SAAAA,IAAaC,SAAS,CAAnCF,SAAAA,IAAX,EAAA;AAEA,SAAO,WAAA,IAAA,CAAA,EAAA,IAAA,OAAA,GAAP,GAAA;AACD;;AAED,IAAMG,MAAM,GAAGC,QAAf,EAAA;AAEA;;;;AAGO,IAAMC,eAAwB,GAAGF,MAAM,KAAvC,GAAA;AACP;;;;;AAGO,IAAMG,mBAA4B,GAAGH,MAAM,KAA3C,OAAA","sourcesContent":["import { canUseDOM } from './dom';\n\nexport enum OS {\n  ANDROID = 'android',\n  IOS = 'ios',\n}\n\nexport const ANDROID = OS.ANDROID;\nexport const IOS = OS.IOS;\n\nexport type OSType = OS.ANDROID | OS.IOS;\n\nexport function platform(useragent?: string): OSType {\n  const ua = useragent || canUseDOM && navigator.userAgent || '';\n\n  return /android/i.test(ua) ? ANDROID : IOS;\n}\n\nconst osname = platform();\n\n/**\n * @deprecated для определения платформы используйте withPlatform или usePlatform\n */\nexport const IS_PLATFORM_IOS: boolean = osname === IOS;\n/**\n * @deprecated для определения платформы используйте withPlatform или usePlatform\n */\nexport const IS_PLATFORM_ANDROID: boolean = osname === ANDROID;\n"]},"metadata":{},"sourceType":"script"}