{"version":3,"sources":["../../../src/components/Tooltip/Tooltip.tsx"],"names":["isDOMTypeElement","element","React","isValidElement","type","baseClassName","TooltipPortal","props","target","targetBounds","getBoundingClientRect","portalBounds","portalTarget","width","height","x","left","y","top","el","state","fixedPortal","closestFixed","closest","closestHeader","closestPanel","document","removeEventListener","onClose","offsetY","offsetX","alignX","alignY","coords","getBoundingTargetRect","addEventListener","setState","offsetWidth","offsetHeight","header","text","cornerOffset","ReactDOM","createPortal","getRef","context","Component","PropTypes","object","panel","string","Tooltip","ready","targetEl","canUseDOM","children","isShown","portalProps","child","cloneElement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;AAuBA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,OAAD,EAA2B;AAClD,SAAOC,eAAMC,cAAN,CAAqBF,OAArB,KAAiC,OAAOA,OAAO,CAACG,IAAf,KAAwB,QAAhE;AACD,CAFD;;AAIA,IAAMC,aAAa,GAAG,2BAAa,SAAb,CAAtB;;IAEMC,a;;;;;AACJ,yBAAYC,KAAZ,EAAuC;AAAA;;AAAA;AACrC,8BAAMA,KAAN;AADqC;AAAA;AAAA;AAAA,wGAqCQ,YAAM;AAAA,UAC3CC,MAD2C,GAChC,MAAKD,KAD2B,CAC3CC,MAD2C;AAEnD,UAAMC,YAAY,GAAGD,MAAM,CAACE,qBAAP,EAArB;;AACA,UAAMC,YAAY,GAAG,MAAKC,YAAL,CAAkBF,qBAAlB,EAArB;;AAEA,aAAO;AACLG,QAAAA,KAAK,EAAEJ,YAAY,CAACI,KADf;AAELC,QAAAA,MAAM,EAAEL,YAAY,CAACK,MAFhB;AAGLC,QAAAA,CAAC,EAAEN,YAAY,CAACO,IAAb,GAAoBL,YAAY,CAACK,IAH/B;AAILC,QAAAA,CAAC,EAAER,YAAY,CAACS,GAAb,GAAmBP,YAAY,CAACO;AAJ9B,OAAP;AAMD,KAhDsC;AAAA,yFAkEN,UAACC,EAAD;AAAA,aAAwB,MAAKA,EAAL,GAAUA,EAAlC;AAAA,KAlEM;AAGrC,UAAKC,KAAL,GAAa;AACXL,MAAAA,CAAC,EAAE,CADQ;AAEXE,MAAAA,CAAC,EAAE;AAFQ,KAAb;AAKA,UAAKI,WAAL,GAAmB,KAAnB;AARqC,QAU7Bb,OAV6B,GAUlBD,KAVkB,CAU7BC,MAV6B;;AAWrC,QAAMc,YAAY,GAAGd,OAAM,CAACe,OAAP,CAA4B,cAA5B,CAArB;;AACA,QAAMC,aAAa,GAAGhB,OAAM,CAACe,OAAP,CAA4B,kBAA5B,CAAtB;;AACA,QAAME,YAAY,GAAGjB,OAAM,CAACe,OAAP,CAA4B,YAA5B,CAArB;;AAEA,QAAID,YAAY,IAAIE,aAApB,EAAmC;AACjC,YAAKH,WAAL,GAAmB,IAAnB;AACD;;AAED,UAAKT,YAAL,GAAoBU,YAAY,IAAIE,aAAhB,IAAiCC,YAArD;AAnBqC;AAoBtC;;;;2CA8BsB;AACrB,WAAKC,QAAL,CAAcC,mBAAd,CAAkC,OAAlC,EAA2C,KAAKpB,KAAL,CAAWqB,OAAtD;AACD;;;wCAEmB;AAAA,wBAC2B,KAAKrB,KADhC;AAAA,UACVsB,OADU,eACVA,OADU;AAAA,UACDC,OADC,eACDA,OADC;AAAA,UACQC,MADR,eACQA,MADR;AAAA,UACgBC,MADhB,eACgBA,MADhB;AAElB,UAAMC,MAAM,GAAG,KAAKC,qBAAL,EAAf;AAEA,WAAKR,QAAL,CAAcS,gBAAd,CAA+B,OAA/B,EAAwC,KAAK5B,KAAL,CAAWqB,OAAnD;AAEA,WAAKQ,QAAL,CAAc;AACZrB,QAAAA,CAAC,EAAEkB,MAAM,CAAClB,CAAP,GAAWe,OAAX,IAAsBC,MAAM,KAAK,OAAX,GAAqBE,MAAM,CAACpB,KAAP,GAAe,KAAKM,EAAL,CAAQkB,WAA5C,GAA0D,CAAhF,CADS;AAEZpB,QAAAA,CAAC,EAAEgB,MAAM,CAAChB,CAAP,IAAYe,MAAM,KAAK,KAAX,GAAmB,CAAC,KAAKb,EAAL,CAAQmB,YAAT,GAAwBT,OAA3C,GAAqDI,MAAM,CAACnB,MAAP,GAAgBe,OAAjF;AAFS,OAAd;AAID;;;6BAIQ;AAAA,yBACgD,KAAKtB,KADrD;AAAA,UACCgC,MADD,gBACCA,MADD;AAAA,UACSC,IADT,gBACSA,IADT;AAAA,UACeT,MADf,gBACeA,MADf;AAAA,UACuBC,MADvB,gBACuBA,MADvB;AAAA,UAC+BS,YAD/B,gBAC+BA,YAD/B;AAGP,aAAOC,kBAASC,YAAT,eACL;AAAK,QAAA,SAAS,EACZ,yBACEtC,aADF,uBAEgB0B,MAFhB,wBAGgBC,MAHhB,GAIE;AACE,4BAAkB,KAAKX;AADzB,SAJF;AADF,sBASE;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAoC,QAAA,KAAK,EAAE;AAAEH,UAAAA,GAAG,EAAE,KAAKE,KAAL,CAAWH,CAAlB;AAAqBD,UAAAA,IAAI,EAAE,KAAKI,KAAL,CAAWL;AAAtC,SAA3C;AAAsF,QAAA,GAAG,EAAE,KAAK6B;AAAhG,sBACE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAiC,QAAA,KAAK,oCAAKb,MAAL,EAAc,KAAKU,YAAnB;AAAtC,QADF,eAEE;AAAK,QAAA,SAAS,EAAC;AAAf,SACGF,MAAM,iBAAI;AAAK,QAAA,SAAS,EAAC;AAAf,SAAiCA,MAAjC,CADb,EAEGC,IAAI,iBAAI;AAAK,QAAA,SAAS,EAAC;AAAf,SAAgCA,IAAhC,CAFX,CAFF,CATF,CADK,EAiBG,KAAK5B,YAjBR,CAAP;AAkBD;;;wBA9Dc;AACb,aAAO,KAAKiC,OAAL,CAAanB,QAAb,IAAyBA,QAAhC;AACD;;;EA9ByBoB,gB;;8BAAtBxC,a,kBAuB4C;AAC9CoB,EAAAA,QAAQ,EAAEqB,mBAAUC,MAD0B;AAE9CC,EAAAA,KAAK,EAAEF,mBAAUG;AAF6B,C;;IAuH7BC,O;;;;;;;;;;;;;;;yFAUG;AACpBC,MAAAA,KAAK,EAAE;AADa,K;;0FAYW,UAACjC,EAAD;AAAA,aAAwB,OAAKkC,QAAL,GAAgBlC,EAAxC;AAAA,K;;;;;;wCANb;AAClB,UAAImC,cAAJ,EAAe;AACb,aAAKD,QAAL,IAAiB,KAAKjB,QAAL,CAAc;AAAEgB,UAAAA,KAAK,EAAE;AAAT,SAAd,CAAjB;AACD;AACF;;;6BAIQ;AAAA,yBACuC,KAAK7C,KAD5C;AAAA,UACCgD,QADD,gBACCA,QADD;AAAA,UACWC,OADX,gBACWA,OADX;AAAA,UACuBC,WADvB;;AAGP,UAAMC,KAAK,GAAGxD,eAAMyD,YAAN,CAAmBJ,QAAnB,oCACXvD,gBAAgB,CAACuD,QAAD,CAAhB,GAA6C,KAA7C,GAAqD,YAD1C,EACyD,KAAKX,MAD9D,EAAd;;AAIA,UAAI,CAACY,OAAD,IAAY,CAAC,KAAKpC,KAAL,CAAWgC,KAA5B,EAAmC;AACjC,eAAOM,KAAP;AACD;;AAED,0BACE,6BAAC,eAAD,QACGA,KADH,eAEE,6BAAC,aAAD,6BAAmBD,WAAnB;AAAgC,QAAA,MAAM,EAAE,KAAKJ;AAA7C,SAFF,CADF;AAMD;;;EAzCkCP,gB;;;8BAAhBK,O,kBAC0B;AAC3CrB,EAAAA,OAAO,EAAE,CADkC;AAE3CD,EAAAA,OAAO,EAAE,EAFkC;AAG3CE,EAAAA,MAAM,EAAE,MAHmC;AAI3CC,EAAAA,MAAM,EAAE,QAJmC;AAK3CS,EAAAA,YAAY,EAAE,CAL6B;AAM3Ce,EAAAA,OAAO,EAAE;AANkC,C","sourcesContent":["import React, { ReactElement, ReactNode, Component, Fragment } from 'react';\nimport PropTypes, { Requireable } from 'prop-types';\nimport classNames from '../../lib/classNames';\nimport getClassName from '../../helpers/getClassName';\nimport ReactDOM from 'react-dom';\nimport { OldRef } from '../../types';\nimport { canUseDOM } from '../../lib/dom';\n\ninterface TooltipPortalProps extends Partial<TooltipProps> {\n  target?: HTMLElement;\n}\n\ninterface TooltipPortalState {\n  x: number;\n  y: number;\n}\n\ninterface TooltipPortalContextType {\n  document: Requireable<{}>;\n  panel: Requireable<string>;\n}\n\ntype GetBoundingTargetRect = () => {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n};\n\nconst isDOMTypeElement = (element: ReactElement) => {\n  return React.isValidElement(element) && typeof element.type === 'string';\n};\n\nconst baseClassName = getClassName('Tooltip');\n\nclass TooltipPortal extends Component<TooltipPortalProps, TooltipPortalState> {\n  constructor(props: TooltipPortalProps) {\n    super(props);\n\n    this.state = {\n      x: 0,\n      y: 0,\n    };\n\n    this.fixedPortal = false;\n\n    const { target } = props;\n    const closestFixed = target.closest<HTMLElement>('.FixedLayout');\n    const closestHeader = target.closest<HTMLElement>('.PanelHeader__in');\n    const closestPanel = target.closest<HTMLElement>('.Panel__in');\n\n    if (closestFixed || closestHeader) {\n      this.fixedPortal = true;\n    }\n\n    this.portalTarget = closestFixed || closestHeader || closestPanel;\n  }\n\n  static contextTypes: TooltipPortalContextType = {\n    document: PropTypes.object,\n    panel: PropTypes.string,\n  };\n\n  get document() {\n    return this.context.document || document;\n  }\n\n  fixedPortal: boolean;\n\n  el: HTMLDivElement;\n\n  portalTarget: HTMLElement;\n\n  getBoundingTargetRect: GetBoundingTargetRect = () => {\n    const { target } = this.props;\n    const targetBounds = target.getBoundingClientRect();\n    const portalBounds = this.portalTarget.getBoundingClientRect();\n\n    return {\n      width: targetBounds.width,\n      height: targetBounds.height,\n      x: targetBounds.left - portalBounds.left,\n      y: targetBounds.top - portalBounds.top,\n    };\n  };\n\n  componentWillUnmount() {\n    this.document.removeEventListener('click', this.props.onClose);\n  }\n\n  componentDidMount() {\n    const { offsetY, offsetX, alignX, alignY } = this.props;\n    const coords = this.getBoundingTargetRect();\n\n    this.document.addEventListener('click', this.props.onClose);\n\n    this.setState({\n      x: coords.x + offsetX + (alignX === 'right' ? coords.width - this.el.offsetWidth : 0),\n      y: coords.y + (alignY === 'top' ? -this.el.offsetHeight - offsetY : coords.height + offsetY),\n    });\n  }\n\n  getRef: OldRef<HTMLDivElement> = (el: HTMLDivElement) => this.el = el;\n\n  render() {\n    const { header, text, alignX, alignY, cornerOffset } = this.props;\n\n    return ReactDOM.createPortal(\n      <div className={\n        classNames(\n          baseClassName,\n          `Tooltip--x-${alignX}`,\n          `Tooltip--y-${alignY}`,\n          {\n            'Tooltip--fixed': this.fixedPortal,\n          },\n        )}>\n        <div className=\"Tooltip__container\" style={{ top: this.state.y, left: this.state.x }} ref={this.getRef}>\n          <div className=\"Tooltip__corner\" style={{ [alignX]: 20 + cornerOffset }} />\n          <div className=\"Tooltip__content\">\n            {header && <div className=\"Tooltip__title\">{header}</div>}\n            {text && <div className=\"Tooltip__text\">{text}</div>}\n          </div>\n        </div>\n      </div>, this.portalTarget);\n  }\n}\n\nexport interface TooltipProps {\n  /**\n   * **Важно**: если в `children` передан React-компонент, то необходимо убедиться в том, что он поддерживает\n   * свойство `getRootRef`, которое должно возвращаться ссылку на корневой DOM-элемент компонента,\n   * иначе тултип показан не будет. Если передан React-element, то такой проблемы нет.\n   */\n  children: ReactNode;\n  /**\n   * Если передан `false`, то рисуется просто `children`.\n   */\n  isShown: boolean;\n  /**\n   * Текст тултипа.\n   */\n  text?: ReactNode;\n  /**\n   * Заголовок тултипа.\n   */\n  header?: ReactNode;\n  /**\n   * Положение по горизонтали (прижатие к левому или правому краю `children`).\n   */\n  alignX?: 'left' | 'right';\n  /**\n   * Положение по вертикали (расположение над или под `children`).\n   */\n  alignY?: 'top' | 'bottom';\n  /**\n   * Сдвиг по горизонтали (относительно портала, в котором рисуется тултип).\n   */\n  offsetX?: number;\n  /**\n   * Сдвиг по вертикали (относительно портала, в котором рисуется тултип).\n   */\n  offsetY?: number;\n  /**\n   * Сдвиг треугольника (относительно ширины тултипа).\n   */\n  cornerOffset?: number;\n  /**\n   * Callback, который вызывается при клике по любому месту в пределах экрана.\n   */\n  onClose(): void;\n}\n\nexport interface TooltipState {\n  ready: boolean;\n}\n\nexport default class Tooltip extends Component<TooltipProps, TooltipState> {\n  static defaultProps: Partial<TooltipProps> = {\n    offsetX: 0,\n    offsetY: 15,\n    alignX: 'left',\n    alignY: 'bottom',\n    cornerOffset: 0,\n    isShown: true,\n  };\n\n  state: TooltipState = {\n    ready: false,\n  };\n\n  targetEl: HTMLElement;\n\n  componentDidMount() {\n    if (canUseDOM) {\n      this.targetEl && this.setState({ ready: true });\n    }\n  }\n\n  getRef: OldRef<HTMLDivElement> = (el: HTMLDivElement) => this.targetEl = el;\n\n  render() {\n    const { children, isShown, ...portalProps } = this.props;\n\n    const child = React.cloneElement(children as ReactElement, {\n      [isDOMTypeElement(children as ReactElement) ? 'ref' : 'getRootRef']: this.getRef,\n    });\n\n    if (!isShown || !this.state.ready) {\n      return child;\n    }\n\n    return (\n      <Fragment>\n        {child}\n        <TooltipPortal {...portalProps} target={this.targetEl} />\n      </Fragment>\n    );\n  }\n}\n"],"file":"Tooltip.js"}