{"version":3,"sources":["../../../src/components/RichCell/RichCell.tsx"],"names":["RichCell","children","text","caption","before","after","bottom","actions","multiline","className","restProps","platform","isAfterPrimitive","href"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AA2BA,IAAMA,QAA0C,GAAG,SAA7CA,QAA6C,OAW7C;AAAA,MAVJC,QAUI,QAVJA,QAUI;AAAA,MATJC,IASI,QATJA,IASI;AAAA,MARJC,OAQI,QARJA,OAQI;AAAA,MAPJC,MAOI,QAPJA,MAOI;AAAA,MANJC,KAMI,QANJA,KAMI;AAAA,MALJC,MAKI,QALJA,MAKI;AAAA,MAJJC,OAII,QAJJA,OAII;AAAA,MAHJC,SAGI,QAHJA,SAGI;AAAA,MAFJC,SAEI,QAFJA,SAEI;AAAA,MADDC,SACC;AACJ,MAAMC,QAAQ,GAAG,2BAAjB;AACA,MAAMC,gBAAgB,GAAG,OAAOP,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAAvE;AAEA,sBACE,6BAAC,iBAAD,6BACMK,SADN;AAEE,IAAA,SAAS,EAAEA,SAAS,CAACG,IAAV,GAAiB,GAAjB,GAAuB,KAFpC;AAGE,IAAA,SAAS,EACP,yBACEJ,SADF,EAEE,2BAAa,UAAb,EAAyBE,QAAzB,CAFF,EAGE;AACE,wBAAkBH;AADpB,KAHF;AAJJ,MAaGJ,MAbH,eAcE;AAAK,IAAA,SAAS,EAAC;AAAf,kBACE;AAAK,IAAA,SAAS,EAAC;AAAf,KAEGQ,gBAAgB,gBAAG,2CAAOP,KAAP,CAAH,GAA0BA,KAF7C,eAGE;AAAK,IAAA,SAAS,EAAC;AAAf,kBACE;AAAK,IAAA,SAAS,EAAC;AAAf,KAAqCJ,QAArC,CADF,EAEGI,KAAK,iBAAI;AAAK,IAAA,SAAS,EAAC;AAAf,KAAkCA,KAAlC,CAFZ,CAHF,EAOGH,IAAI,iBAAI;AAAK,IAAA,SAAS,EAAC;AAAf,KAAiCA,IAAjC,CAPX,EAQGC,OAAO,iBAAI;AAAK,IAAA,SAAS,EAAC;AAAf,KAAoCA,OAApC,CARd,EASG,CAACG,MAAM,IAAIC,OAAX,kBACC;AAAK,IAAA,SAAS,EAAC;AAAf,KACGD,MADH,EAEGC,OAAO,iBAAI;AAAK,IAAA,SAAS,EAAC;AAAf,KAAoCA,OAApC,CAFd,CAVJ,CADF,CAdF,CADF;AAmCD,CAlDD;;eAoDeP,Q","sourcesContent":["import React, { FunctionComponent, HTMLAttributes, ReactNode } from 'react';\nimport classNames from '../../lib/classNames';\nimport usePlatform from '../../hooks/usePlatform';\nimport getClassName from '../../helpers/getClassName';\nimport { HasRootRef } from '../../types';\nimport Tappable from '../Tappable/Tappable';\n\nexport interface RichCellProps extends HTMLAttributes<HTMLElement>, HasRootRef<HTMLElement> {\n  text?: ReactNode;\n  caption?: ReactNode;\n  /**\n   * `<Avatar size={48|72} />`\n   */\n  before?: ReactNode;\n  /**\n   * Иконка 28 или текст\n   */\n  after?: ReactNode;\n  /**\n   * Например `<UsersStack size=\"s\" />`\n   */\n  bottom?: ReactNode;\n  /**\n   * Кнопка или набор кнопок `<Button size=\"m\" />`\n   */\n  actions?: ReactNode;\n  disabled?: boolean;\n  multiline?: boolean;\n  href?: string;\n  target?: string;\n}\n\nconst RichCell: FunctionComponent<RichCellProps> = ({\n  children,\n  text,\n  caption,\n  before,\n  after,\n  bottom,\n  actions,\n  multiline,\n  className,\n  ...restProps\n}) => {\n  const platform = usePlatform();\n  const isAfterPrimitive = typeof after === 'string' || typeof after === 'number';\n\n  return (\n    <Tappable\n      {...restProps}\n      Component={restProps.href ? 'a' : 'div'}\n      className={\n        classNames(\n          className,\n          getClassName('RichCell', platform),\n          {\n            'RichCell--mult': multiline,\n          },\n        )\n      }\n    >\n      {before}\n      <div className=\"RichCell__in\">\n        <div className=\"RichCell__top\">\n          {/* Этот after будет скрыт из верстки. Он нужен для CSS */}\n          {isAfterPrimitive ? <span>{after}</span> : after}\n          <div className=\"RichCell__content\">\n            <div className=\"RichCell__children\">{children}</div>\n            {after && <div className=\"RichCell__after\">{after}</div>}\n          </div>\n          {text && <div className=\"RichCell__text\">{text}</div>}\n          {caption && <div className=\"RichCell__caption\">{caption}</div>}\n          {(bottom || actions) &&\n            <div className=\"RichCell__bottom\">\n              {bottom}\n              {actions && <div className=\"RichCell__actions\">{actions}</div>}\n            </div>\n          }\n        </div>\n      </div>\n    </Tappable>\n  );\n};\n\nexport default RichCell;\n"],"file":"RichCell.js"}