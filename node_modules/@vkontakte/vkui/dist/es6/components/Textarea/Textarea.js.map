{"version":3,"sources":["../../../../src/components/Textarea/Textarea.tsx"],"names":["React","PureComponent","classNames","FormField","Textarea","props","element","getRef","current","el","offsetHeight","scrollHeight","style","window","getComputedStyle","paddingTop","parseInt","paddingBottom","diff","value","setState","height","onResize","e","grow","resize","isControlledOutside","target","onChange","state","defaultValue","prevProps","requestAnimationFrame","className","getRootRef","status","top","bottom","restProps"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, ChangeEventHandler, PureComponent, TextareaHTMLAttributes } from 'react';\nimport classNames from '../../lib/classNames';\nimport FormField from '../FormField/FormField';\nimport { HasFormLabels, HasFormStatus, HasRef, HasRootRef, OldRef } from '../../types';\n\nexport interface TextareaProps extends\n  TextareaHTMLAttributes<HTMLTextAreaElement>,\n  HasRef<HTMLTextAreaElement>,\n  HasRootRef<HTMLElement>,\n  HasFormStatus,\n  HasFormLabels {\n  grow?: boolean;\n  onResize?(el: HTMLTextAreaElement): void;\n  defaultValue?: string;\n}\n\nexport interface TextareaState {\n  value?: string;\n  height?: number;\n}\n\nexport default class Textarea extends PureComponent<TextareaProps, TextareaState> {\n  constructor(props: TextareaProps) {\n    super(props);\n\n    if (typeof props.value !== 'undefined') {\n      this.isControlledOutside = true;\n      this.state = {};\n    } else {\n      this.state = {\n        value: props.defaultValue || '',\n      };\n    }\n  }\n\n  isControlledOutside?: boolean;\n  element: HTMLTextAreaElement;\n\n  componentDidMount() {\n    if (this.props.grow) {\n      this.resize();\n    }\n  }\n\n  static defaultProps: TextareaProps = {\n    style: {},\n    defaultValue: '',\n    grow: true,\n  };\n\n  getRef: OldRef<HTMLTextAreaElement> = (element: HTMLTextAreaElement) => {\n    this.element = element;\n\n    const getRef = this.props.getRef;\n    if (getRef) {\n      if (typeof getRef === 'function') {\n        getRef(element);\n      } else {\n        getRef.current = element;\n      }\n    }\n  };\n\n  resize: VoidFunction = () => {\n    const el = this.element;\n\n    if (el) {\n      const { offsetHeight, scrollHeight } = el;\n      const style = window.getComputedStyle(el);\n      const paddingTop = parseInt(style.paddingTop);\n      const paddingBottom = parseInt(style.paddingBottom);\n\n      let diff = paddingTop + paddingBottom;\n\n      if (scrollHeight + diff <= offsetHeight) {\n        diff = 0;\n      }\n\n      if (el.value) {\n        this.setState({ height: scrollHeight - diff });\n      }\n\n      this.setState({ height: 0 }, () => {\n        const height = el.scrollHeight - diff;\n\n        this.setState({ height });\n\n        if (this.props.onResize) {\n          this.props.onResize(el);\n        }\n      });\n    }\n  };\n\n  get value() {return this.isControlledOutside ? this.props.value : this.state.value;}\n\n  onChange: ChangeEventHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\n    if (this.props.grow) {\n      this.resize();\n    }\n\n    if (!this.isControlledOutside) {\n      this.setState({ value: e.target.value });\n    }\n\n    if (this.props.onChange) {\n      this.props.onChange(e);\n    }\n  };\n\n  componentDidUpdate(prevProps: TextareaProps) {\n    if (prevProps.value && this.props.value === '') {\n      // Fix iOS extra indent on removing content\n      window.requestAnimationFrame(() => {\n        this.element.value = '';\n      });\n    }\n  }\n\n  render() {\n    const { defaultValue, value, onChange, grow, style, onResize, className,\n      getRootRef, getRef, status, top, bottom, ...restProps } = this.props;\n\n    const height = this.state.height || style.height || 66;\n\n    return (\n      <FormField\n        className={classNames('Textarea', className)}\n        style={style}\n        getRootRef={getRootRef}\n        status={status}\n      >\n        <textarea\n          {...restProps}\n          className=\"Textarea__el\"\n          value={this.value}\n          onChange={this.onChange}\n          ref={this.getRef}\n          style={{ height }}\n        />\n      </FormField>\n    );\n  }\n}\n"],"file":"Textarea.js"}