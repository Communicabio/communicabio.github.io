import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import React, { useContext } from 'react';
import usePlatform from '../../hooks/usePlatform';
import getClassname from '../../helpers/getClassName';
import classNames from '../../lib/classNames';
import FixedLayout from '../FixedLayout/FixedLayout';
import Separator from '../Separator/Separator';
import { ANDROID } from '../../lib/platform';
import { ConfigProviderContext, WebviewType } from '../ConfigProvider/ConfigProviderContext';
import { PanelContext } from '../Panel/PanelContext';

var PanelHeader = function PanelHeader(_ref) {
  var className = _ref.className,
      left = _ref.left,
      addon = _ref.addon,
      children = _ref.children,
      right = _ref.right,
      separator = _ref.separator,
      visor = _ref.visor,
      transparent = _ref.transparent,
      getRef = _ref.getRef,
      getRootRef = _ref.getRootRef,
      restProps = _objectWithoutProperties(_ref, ["className", "left", "addon", "children", "right", "separator", "visor", "transparent", "getRef", "getRootRef"]);

  var platform = usePlatform();

  var _useContext = useContext(ConfigProviderContext),
      webviewType = _useContext.webviewType;

  var panelContext = useContext(PanelContext);
  var needSeparator = separator;

  if (typeof separator !== 'boolean') {
    needSeparator = panelContext.separator;
  }

  var isPrimitive = typeof children === 'string' || typeof children === 'number';
  return /*#__PURE__*/React.createElement("div", _extends({}, restProps, {
    className: classNames(getClassname('PanelHeader', platform), {
      'PanelHeader--trnsp': transparent,
      'PanelHeader--vis': visor,
      'PanelHeader--sep': needSeparator && visor,
      'PanelHeader--vkapps': webviewType === WebviewType.VKAPPS,
      'PanelHeader--no-left': left === undefined,
      'PanelHeader--no-right': right === undefined
    }, className),
    ref: getRootRef
  }), /*#__PURE__*/React.createElement(FixedLayout, {
    vertical: "top",
    className: "PanelHeader__fixed",
    getRootRef: getRef
  }, /*#__PURE__*/React.createElement("div", {
    className: "PanelHeader__in"
  }, /*#__PURE__*/React.createElement("div", {
    className: "PanelHeader__left"
  }, left, platform !== ANDROID && addon), /*#__PURE__*/React.createElement("div", {
    className: "PanelHeader__content"
  }, isPrimitive ? /*#__PURE__*/React.createElement("span", null, children) : children), /*#__PURE__*/React.createElement("div", {
    className: "PanelHeader__right"
  }, webviewType !== WebviewType.VKAPPS && right))), needSeparator && visor && /*#__PURE__*/React.createElement(Separator, {
    className: "PanelHeader__separator"
  }));
};

PanelHeader.defaultProps = {
  separator: true,
  transparent: false,
  visor: true
};
export default PanelHeader;
//# sourceMappingURL=PanelHeader.js.map