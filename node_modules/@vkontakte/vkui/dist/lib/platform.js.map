{"version":3,"sources":["../../src/lib/platform.ts"],"names":["OS","ANDROID","IOS","platform","useragent","ua","canUseDOM","navigator","userAgent","test","osname","IS_PLATFORM_IOS","IS_PLATFORM_ANDROID"],"mappings":";;;;;;;;AAAA;;IAEYA,E;;;WAAAA,E;AAAAA,EAAAA,E;AAAAA,EAAAA,E;GAAAA,E,kBAAAA,E;;AAKL,IAAMC,OAAO,GAAGD,EAAE,CAACC,OAAnB;;AACA,IAAMC,GAAG,GAAGF,EAAE,CAACE,GAAf;;;AAIA,SAASC,QAAT,CAAkBC,SAAlB,EAA8C;AACnD,MAAMC,EAAE,GAAGD,SAAS,IAAIE,kBAAaC,SAAS,CAACC,SAApC,IAAiD,EAA5D;AAEA,SAAO,WAAWC,IAAX,CAAgBJ,EAAhB,IAAsBJ,OAAtB,GAAgCC,GAAvC;AACD;;AAED,IAAMQ,MAAM,GAAGP,QAAQ,EAAvB;AAEA;;;;AAGO,IAAMQ,eAAwB,GAAGD,MAAM,KAAKR,GAA5C;AACP;;;;;AAGO,IAAMU,mBAA4B,GAAGF,MAAM,KAAKT,OAAhD","sourcesContent":["import { canUseDOM } from './dom';\n\nexport enum OS {\n  ANDROID = 'android',\n  IOS = 'ios',\n}\n\nexport const ANDROID = OS.ANDROID;\nexport const IOS = OS.IOS;\n\nexport type OSType = OS.ANDROID | OS.IOS;\n\nexport function platform(useragent?: string): OSType {\n  const ua = useragent || canUseDOM && navigator.userAgent || '';\n\n  return /android/i.test(ua) ? ANDROID : IOS;\n}\n\nconst osname = platform();\n\n/**\n * @deprecated для определения платформы используйте withPlatform или usePlatform\n */\nexport const IS_PLATFORM_IOS: boolean = osname === IOS;\n/**\n * @deprecated для определения платформы используйте withPlatform или usePlatform\n */\nexport const IS_PLATFORM_ANDROID: boolean = osname === ANDROID;\n"],"file":"platform.js"}